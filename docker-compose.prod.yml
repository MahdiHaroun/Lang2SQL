version: '3.8'

services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: sqlagent_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your_redis_password}
    networks:
      - sqlagent_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL service
  postgres:
    image: postgres:15-alpine
    container_name: sqlagent_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sqlagent}
      POSTGRES_USER: ${POSTGRES_USER:-sqlagent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sqlagent_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - sqlagent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # SQLAgent API service
  sqlagent_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sqlagent_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-sqlagent}:${POSTGRES_PASSWORD:-sqlagent_password}@postgres:5432/${POSTGRES_DB:-sqlagent}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    networks:
      - sqlagent_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sqlagent_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - sqlagent_network
    depends_on:
      - sqlagent_api

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  sqlagent_network:
    driver: bridge